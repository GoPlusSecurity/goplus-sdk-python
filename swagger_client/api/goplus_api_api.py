# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GoplusApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def address_contract_using_get1(self, address, **kwargs):  # noqa: E501
        """Check if the address is malicious  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_contract_using_get1(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str chain_id: The chain_id of the blockchain. \"1\" means Ethereum;  \"10\" means Optimism; “25” means Cronos; \"56\" means BSC;  “66” means OKC; \"100\" means Gnosis; \"128\" means HECO;  \"137\" means Polygon;  \"250\" means Fantom; \"321\" means KCC; \"324\" means zkSync Era; \"10001\" means ETHW; \"201022\" means FON; \"42161\" means Arbitrum;  \"43114\" means Avalanche; \"59140\" means Linea; \"1666600000\" means Harmony; \"tron\" means Tron.
        :return: ResponseWrapperAddressContract
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.address_contract_using_get1_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.address_contract_using_get1_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def address_contract_using_get1_with_http_info(self, address, **kwargs):  # noqa: E501
        """Check if the address is malicious  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_contract_using_get1_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str chain_id: The chain_id of the blockchain. \"1\" means Ethereum;  \"10\" means Optimism; “25” means Cronos; \"56\" means BSC;  “66” means OKC; \"100\" means Gnosis; \"128\" means HECO;  \"137\" means Polygon;  \"250\" means Fantom; \"321\" means KCC; \"324\" means zkSync Era; \"10001\" means ETHW; \"201022\" means FON; \"42161\" means Arbitrum;  \"43114\" means Avalanche; \"59140\" means Linea; \"1666600000\" means Harmony; \"tron\" means Tron.
        :return: ResponseWrapperAddressContract
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address', 'authorization', 'chain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_contract_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `address_contract_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'chain_id' in params:
            query_params.append(('chain_id', params['chain_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/address_security/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperAddressContract',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_nft1155_approve_list_using_get1(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc1155 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_nft1155_approve_list_using_get1(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveNFT1155ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.address_nft1155_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.address_nft1155_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
            return data

    def address_nft1155_approve_list_using_get1_with_http_info(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc1155 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_nft1155_approve_list_using_get1_with_http_info(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveNFT1155ListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addresses', 'chain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_nft1155_approve_list_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addresses' is set
        if ('addresses' not in params or
                params['addresses'] is None):
            raise ValueError("Missing the required parameter `addresses` when calling `address_nft1155_approve_list_using_get1`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `address_nft1155_approve_list_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chainId'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'addresses' in params:
            query_params.append(('addresses', params['addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nft1155_approval_security/{chainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperListApproveNFT1155ListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_nft721_approve_list_using_get1(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc721 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_nft721_approve_list_using_get1(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveNFTListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.address_nft721_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.address_nft721_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
            return data

    def address_nft721_approve_list_using_get1_with_http_info(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc721 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_nft721_approve_list_using_get1_with_http_info(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveNFTListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addresses', 'chain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_nft721_approve_list_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addresses' is set
        if ('addresses' not in params or
                params['addresses'] is None):
            raise ValueError("Missing the required parameter `addresses` when calling `address_nft721_approve_list_using_get1`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `address_nft721_approve_list_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chainId'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'addresses' in params:
            query_params.append(('addresses', params['addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/nft721_approval_security/{chainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperListApproveNFTListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def address_token_approve_list_using_get1(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc20 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_token_approve_list_using_get1(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveTokenOutListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.address_token_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.address_token_approve_list_using_get1_with_http_info(addresses, chain_id, **kwargs)  # noqa: E501
            return data

    def address_token_approve_list_using_get1_with_http_info(self, addresses, chain_id, **kwargs):  # noqa: E501
        """Check risk of all erc20 approvals under one EOA.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.address_token_approve_list_using_get1_with_http_info(addresses, chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str addresses: contract address (required)
        :param str chain_id: chain id (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperListApproveTokenOutListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addresses', 'chain_id', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method address_token_approve_list_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addresses' is set
        if ('addresses' not in params or
                params['addresses'] is None):
            raise ValueError("Missing the required parameter `addresses` when calling `address_token_approve_list_using_get1`")  # noqa: E501
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `address_token_approve_list_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chainId'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'addresses' in params:
            query_params.append(('addresses', params['addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/token_approval_security/{chainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperListApproveTokenOutListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approval_contract_using_get(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Check if the approval is secure   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approval_contract_using_get(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (ETH: 1,  BSC: 56, OKC: 66, Heco: 128, Polygon: 137, Fantom:250, Arbitrum: 42161, Avalanche: 43114) (required)
        :param str contract_addresses: Contract needs to be detected (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperContractApproveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approval_contract_using_get_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.approval_contract_using_get_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
            return data

    def approval_contract_using_get_with_http_info(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Check if the approval is secure   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approval_contract_using_get_with_http_info(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (ETH: 1,  BSC: 56, OKC: 66, Heco: 128, Polygon: 137, Fantom:250, Arbitrum: 42161, Avalanche: 43114) (required)
        :param str contract_addresses: Contract needs to be detected (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperContractApproveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'contract_addresses', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approval_contract_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `approval_contract_using_get`")  # noqa: E501
        # verify the required parameter 'contract_addresses' is set
        if ('contract_addresses' not in params or
                params['contract_addresses'] is None):
            raise ValueError("Missing the required parameter `contract_addresses` when calling `approval_contract_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chain_id'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'contract_addresses' in params:
            query_params.append(('contract_addresses', params['contract_addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/approval_security/{chain_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperContractApproveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_abi_data_info_using_post(self, body, **kwargs):  # noqa: E501
        """Get abi decode info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abi_data_info_using_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ParseAbiDataRequest body: abiDataRequest (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperParseAbiDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_abi_data_info_using_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_abi_data_info_using_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_abi_data_info_using_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get abi decode info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_abi_data_info_using_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ParseAbiDataRequest body: abiDataRequest (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperParseAbiDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_abi_data_info_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_abi_data_info_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/abi/input_decode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperParseAbiDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chains_list_using_get(self, **kwargs):  # noqa: E501
        """Get the list of chains supported by different functions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chains_list_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str name: API name.
        :return: ResponseWrapperListGetChainsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chains_list_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_chains_list_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_chains_list_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of chains supported by different functions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chains_list_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str name: API name.
        :return: ResponseWrapperListGetChainsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chains_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supported_chains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperListGetChainsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dapp_info_using_get(self, **kwargs):  # noqa: E501
        """Check risk of dapp through URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dapp_info_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str url: Url or domain
        :return: ResponseWrapperDappContractSecurityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dapp_info_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dapp_info_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dapp_info_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Check risk of dapp through URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dapp_info_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str url: Url or domain
        :return: ResponseWrapperDappContractSecurityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dapp_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/dapp_security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperDappContractSecurityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_defi_info_using_get(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Rug-pull Detection API Beta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defi_info_using_get(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (eth: 1, bsc: 56) (required)
        :param str contract_addresses: Defi protocol address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: GetDefiInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_defi_info_using_get_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.get_defi_info_using_get_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
            return data

    def get_defi_info_using_get_with_http_info(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Rug-pull Detection API Beta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defi_info_using_get_with_http_info(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (eth: 1, bsc: 56) (required)
        :param str contract_addresses: Defi protocol address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: GetDefiInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'contract_addresses', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defi_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_defi_info_using_get`")  # noqa: E501
        # verify the required parameter 'contract_addresses' is set
        if ('contract_addresses' not in params or
                params['contract_addresses'] is None):
            raise ValueError("Missing the required parameter `contract_addresses` when calling `get_defi_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chain_id'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'contract_addresses' in params:
            query_params.append(('contract_addresses', params['contract_addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/rugpull_detecting/{chain_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDefiInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nft_info_using_get1(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Get NFT's security and risk data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nft_info_using_get1(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (eth: 1, bsc: 56, Polygon: 137, Avalanche: 43114) (required)
        :param str contract_addresses: NFT contract address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str token_id: tokenId
        :return: ResponseWrapperGetNftInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nft_info_using_get1_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nft_info_using_get1_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
            return data

    def get_nft_info_using_get1_with_http_info(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Get NFT's security and risk data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nft_info_using_get1_with_http_info(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: Chain id, (eth: 1, bsc: 56, Polygon: 137, Avalanche: 43114) (required)
        :param str contract_addresses: NFT contract address (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :param str token_id: tokenId
        :return: ResponseWrapperGetNftInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'contract_addresses', 'authorization', 'token_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nft_info_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_nft_info_using_get1`")  # noqa: E501
        # verify the required parameter 'contract_addresses' is set
        if ('contract_addresses' not in params or
                params['contract_addresses'] is None):
            raise ValueError("Missing the required parameter `contract_addresses` when calling `get_nft_info_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chain_id'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'contract_addresses' in params:
            query_params.append(('contract_addresses', params['contract_addresses']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('token_id', params['token_id']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/nft_security/{chain_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperGetNftInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def phishing_site_using_get(self, url, **kwargs):  # noqa: E501
        """Check if the the url is a phishing site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.phishing_site_using_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: Url (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperPhishingSite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.phishing_site_using_get_with_http_info(url, **kwargs)  # noqa: E501
        else:
            (data) = self.phishing_site_using_get_with_http_info(url, **kwargs)  # noqa: E501
            return data

    def phishing_site_using_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """Check if the the url is a phishing site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.phishing_site_using_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: Url (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperPhishingSite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method phishing_site_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `phishing_site_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/phishing_site', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperPhishingSite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def token_security_using_get1(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Get token's security and risk data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_security_using_get1(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: The chain_id of the blockchain. \"1\" means Ethereum;  \"10\" means Optimism; “25” means Cronos; \"56\" means BSC;  “66” means OKC; \"100\" means Gnosis; \"128\" means HECO;  \"137\" means Polygon;  \"250\" means Fantom; \"321\" means KCC; \"324\" means zkSync Era; \"10001\" means ETHW; \"201022\" means FON; \"42161\" means Arbitrum;  \"43114\" means Avalanche; \"59140\" means Linea; \"1666600000\" means Harmony; \"tron\" means Tron. (required)
        :param str contract_addresses: The contract address of tokens. (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperTokenSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.token_security_using_get1_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
        else:
            (data) = self.token_security_using_get1_with_http_info(chain_id, contract_addresses, **kwargs)  # noqa: E501
            return data

    def token_security_using_get1_with_http_info(self, chain_id, contract_addresses, **kwargs):  # noqa: E501
        """Get token's security and risk data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_security_using_get1_with_http_info(chain_id, contract_addresses, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: The chain_id of the blockchain. \"1\" means Ethereum;  \"10\" means Optimism; “25” means Cronos; \"56\" means BSC;  “66” means OKC; \"100\" means Gnosis; \"128\" means HECO;  \"137\" means Polygon;  \"250\" means Fantom; \"321\" means KCC; \"324\" means zkSync Era; \"10001\" means ETHW; \"201022\" means FON; \"42161\" means Arbitrum;  \"43114\" means Avalanche; \"59140\" means Linea; \"1666600000\" means Harmony; \"tron\" means Tron. (required)
        :param str contract_addresses: The contract address of tokens. (required)
        :param str authorization: Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)
        :return: ResponseWrapperTokenSecurity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'contract_addresses', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method token_security_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `token_security_using_get1`")  # noqa: E501
        # verify the required parameter 'contract_addresses' is set
        if ('contract_addresses' not in params or
                params['contract_addresses'] is None):
            raise ValueError("Missing the required parameter `contract_addresses` when calling `token_security_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chain_id'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'contract_addresses' in params:
            query_params.append(('contract_addresses', params['contract_addresses']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/token_security/{chain_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperTokenSecurity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
