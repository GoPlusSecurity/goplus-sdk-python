# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LockControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_nft_lockers_using_get(self, chain_id, page_num, page_size, pool_address, **kwargs):  # noqa: E501
        """Get lpv3 locker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nft_lockers_using_get(chain_id, page_num, page_size, pool_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: chainId (required)
        :param int page_num: pageNum (required)
        :param int page_size: pageSize (required)
        :param str pool_address: poolAddress (required)
        :param str authorization: Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)
        :return: ResponseWrapperNftLockerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nft_lockers_using_get_with_http_info(chain_id, page_num, page_size, pool_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nft_lockers_using_get_with_http_info(chain_id, page_num, page_size, pool_address, **kwargs)  # noqa: E501
            return data

    def get_nft_lockers_using_get_with_http_info(self, chain_id, page_num, page_size, pool_address, **kwargs):  # noqa: E501
        """Get lpv3 locker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nft_lockers_using_get_with_http_info(chain_id, page_num, page_size, pool_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: chainId (required)
        :param int page_num: pageNum (required)
        :param int page_size: pageSize (required)
        :param str pool_address: poolAddress (required)
        :param str authorization: Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)
        :return: ResponseWrapperNftLockerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'page_num', 'page_size', 'pool_address', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nft_lockers_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_nft_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'page_num' is set
        if ('page_num' not in params or
                params['page_num'] is None):
            raise ValueError("Missing the required parameter `page_num` when calling `get_nft_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_nft_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'pool_address' is set
        if ('pool_address' not in params or
                params['pool_address'] is None):
            raise ValueError("Missing the required parameter `pool_address` when calling `get_nft_lockers_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'chain_id' in params:
            query_params.append(('chainId', params['chain_id']))  # noqa: E501
        if 'page_num' in params:
            query_params.append(('pageNum', params['page_num']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'pool_address' in params:
            query_params.append(('poolAddress', params['pool_address']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open/api/v1/locks/lpv3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperNftLockerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_token_lockers_using_get(self, chain_id, page_num, page_size, token_address, **kwargs):  # noqa: E501
        """Get token locker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_lockers_using_get(chain_id, page_num, page_size, token_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: chainId (required)
        :param int page_num: pageNum (required)
        :param int page_size: pageSize (required)
        :param str token_address: tokenAddress (required)
        :param str authorization: Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)
        :return: ResponseWrapperTokenLockerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_token_lockers_using_get_with_http_info(chain_id, page_num, page_size, token_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_token_lockers_using_get_with_http_info(chain_id, page_num, page_size, token_address, **kwargs)  # noqa: E501
            return data

    def get_token_lockers_using_get_with_http_info(self, chain_id, page_num, page_size, token_address, **kwargs):  # noqa: E501
        """Get token locker info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_token_lockers_using_get_with_http_info(chain_id, page_num, page_size, token_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: chainId (required)
        :param int page_num: pageNum (required)
        :param int page_size: pageSize (required)
        :param str token_address: tokenAddress (required)
        :param str authorization: Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)
        :return: ResponseWrapperTokenLockerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'page_num', 'page_size', 'token_address', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_token_lockers_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if ('chain_id' not in params or
                params['chain_id'] is None):
            raise ValueError("Missing the required parameter `chain_id` when calling `get_token_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'page_num' is set
        if ('page_num' not in params or
                params['page_num'] is None):
            raise ValueError("Missing the required parameter `page_num` when calling `get_token_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `get_token_lockers_using_get`")  # noqa: E501
        # verify the required parameter 'token_address' is set
        if ('token_address' not in params or
                params['token_address'] is None):
            raise ValueError("Missing the required parameter `token_address` when calling `get_token_lockers_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'chain_id' in params:
            query_params.append(('chainId', params['chain_id']))  # noqa: E501
        if 'page_num' in params:
            query_params.append(('pageNum', params['page_num']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'token_address' in params:
            query_params.append(('tokenAddress', params['token_address']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/open/api/v1/locks/token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapperTokenLockerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
