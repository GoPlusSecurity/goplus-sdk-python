# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperTokenSecurityDex(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'liquidity': 'str',
        'pair': 'str'
    }

    attribute_map = {
        'name': 'name',
        'liquidity': 'liquidity',
        'pair': 'pair'
    }

    def __init__(self, name=None, liquidity=None, pair=None):  # noqa: E501
        """ResponseWrapperTokenSecurityDex - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._liquidity = None
        self._pair = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if liquidity is not None:
            self.liquidity = liquidity
        if pair is not None:
            self.pair = pair

    @property
    def name(self):
        """Gets the name of this ResponseWrapperTokenSecurityDex.  # noqa: E501


        :return: The name of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseWrapperTokenSecurityDex.


        :param name: The name of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def liquidity(self):
        """Gets the liquidity of this ResponseWrapperTokenSecurityDex.  # noqa: E501

        Liquidity is converted to USDT denomination.  # noqa: E501

        :return: The liquidity of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._liquidity

    @liquidity.setter
    def liquidity(self, liquidity):
        """Sets the liquidity of this ResponseWrapperTokenSecurityDex.

        Liquidity is converted to USDT denomination.  # noqa: E501

        :param liquidity: The liquidity of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._liquidity = liquidity

    @property
    def pair(self):
        """Gets the pair of this ResponseWrapperTokenSecurityDex.  # noqa: E501

         It only counts when the token has a marketing pair with mainstream   # noqa: E501

        :return: The pair of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._pair

    @pair.setter
    def pair(self, pair):
        """Sets the pair of this ResponseWrapperTokenSecurityDex.

         It only counts when the token has a marketing pair with mainstream   # noqa: E501

        :param pair: The pair of this ResponseWrapperTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._pair = pair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperTokenSecurityDex, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperTokenSecurityDex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
