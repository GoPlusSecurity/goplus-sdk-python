# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SolanaOwnershipChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mint': 'str',
        'symbol': 'str',
        'post_owner': 'str',
        'decimals': 'int',
        'name': 'str',
        'pre_owner': 'str',
        'owner_changed': 'str',
        'risky_post_owner': 'int'
    }

    attribute_map = {
        'mint': 'mint',
        'symbol': 'symbol',
        'post_owner': 'post_owner',
        'decimals': 'decimals',
        'name': 'name',
        'pre_owner': 'pre_owner',
        'owner_changed': 'owner_changed',
        'risky_post_owner': 'risky_post_owner'
    }

    def __init__(self, mint=None, symbol=None, post_owner=None, decimals=None, name=None, pre_owner=None, owner_changed=None, risky_post_owner=None):  # noqa: E501
        """SolanaOwnershipChange - a model defined in Swagger"""  # noqa: E501
        self._mint = None
        self._symbol = None
        self._post_owner = None
        self._decimals = None
        self._name = None
        self._pre_owner = None
        self._owner_changed = None
        self._risky_post_owner = None
        self.discriminator = None
        if mint is not None:
            self.mint = mint
        if symbol is not None:
            self.symbol = symbol
        if post_owner is not None:
            self.post_owner = post_owner
        if decimals is not None:
            self.decimals = decimals
        if name is not None:
            self.name = name
        if pre_owner is not None:
            self.pre_owner = pre_owner
        if owner_changed is not None:
            self.owner_changed = owner_changed
        if risky_post_owner is not None:
            self.risky_post_owner = risky_post_owner

    @property
    def mint(self):
        """Gets the mint of this SolanaOwnershipChange.  # noqa: E501


        :return: The mint of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._mint

    @mint.setter
    def mint(self, mint):
        """Sets the mint of this SolanaOwnershipChange.


        :param mint: The mint of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._mint = mint

    @property
    def symbol(self):
        """Gets the symbol of this SolanaOwnershipChange.  # noqa: E501


        :return: The symbol of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SolanaOwnershipChange.


        :param symbol: The symbol of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def post_owner(self):
        """Gets the post_owner of this SolanaOwnershipChange.  # noqa: E501


        :return: The post_owner of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._post_owner

    @post_owner.setter
    def post_owner(self, post_owner):
        """Sets the post_owner of this SolanaOwnershipChange.


        :param post_owner: The post_owner of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._post_owner = post_owner

    @property
    def decimals(self):
        """Gets the decimals of this SolanaOwnershipChange.  # noqa: E501


        :return: The decimals of this SolanaOwnershipChange.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this SolanaOwnershipChange.


        :param decimals: The decimals of this SolanaOwnershipChange.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def name(self):
        """Gets the name of this SolanaOwnershipChange.  # noqa: E501


        :return: The name of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SolanaOwnershipChange.


        :param name: The name of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pre_owner(self):
        """Gets the pre_owner of this SolanaOwnershipChange.  # noqa: E501


        :return: The pre_owner of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._pre_owner

    @pre_owner.setter
    def pre_owner(self, pre_owner):
        """Sets the pre_owner of this SolanaOwnershipChange.


        :param pre_owner: The pre_owner of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._pre_owner = pre_owner

    @property
    def owner_changed(self):
        """Gets the owner_changed of this SolanaOwnershipChange.  # noqa: E501


        :return: The owner_changed of this SolanaOwnershipChange.  # noqa: E501
        :rtype: str
        """
        return self._owner_changed

    @owner_changed.setter
    def owner_changed(self, owner_changed):
        """Sets the owner_changed of this SolanaOwnershipChange.


        :param owner_changed: The owner_changed of this SolanaOwnershipChange.  # noqa: E501
        :type: str
        """

        self._owner_changed = owner_changed

    @property
    def risky_post_owner(self):
        """Gets the risky_post_owner of this SolanaOwnershipChange.  # noqa: E501


        :return: The risky_post_owner of this SolanaOwnershipChange.  # noqa: E501
        :rtype: int
        """
        return self._risky_post_owner

    @risky_post_owner.setter
    def risky_post_owner(self, risky_post_owner):
        """Sets the risky_post_owner of this SolanaOwnershipChange.


        :param risky_post_owner: The risky_post_owner of this SolanaOwnershipChange.  # noqa: E501
        :type: int
        """

        self._risky_post_owner = risky_post_owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolanaOwnershipChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolanaOwnershipChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
