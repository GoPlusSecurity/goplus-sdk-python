# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApproveTokenOutListResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved_list': 'list[ApproveTokenResult]',
        'balance': 'str',
        'chain_id': 'str',
        'decimals': 'int',
        'is_open_source': 'int',
        'malicious_address': 'int',
        'malicious_behavior': 'list[str]',
        'token_address': 'str',
        'token_name': 'str',
        'token_symbol': 'str'
    }

    attribute_map = {
        'approved_list': 'approved_list',
        'balance': 'balance',
        'chain_id': 'chain_id',
        'decimals': 'decimals',
        'is_open_source': 'is_open_source',
        'malicious_address': 'malicious_address',
        'malicious_behavior': 'malicious_behavior',
        'token_address': 'token_address',
        'token_name': 'token_name',
        'token_symbol': 'token_symbol'
    }

    def __init__(self, approved_list=None, balance=None, chain_id=None, decimals=None, is_open_source=None, malicious_address=None, malicious_behavior=None, token_address=None, token_name=None, token_symbol=None):  # noqa: E501
        """ApproveTokenOutListResponse - a model defined in Swagger"""  # noqa: E501
        self._approved_list = None
        self._balance = None
        self._chain_id = None
        self._decimals = None
        self._is_open_source = None
        self._malicious_address = None
        self._malicious_behavior = None
        self._token_address = None
        self._token_name = None
        self._token_symbol = None
        self.discriminator = None
        if approved_list is not None:
            self.approved_list = approved_list
        if balance is not None:
            self.balance = balance
        if chain_id is not None:
            self.chain_id = chain_id
        if decimals is not None:
            self.decimals = decimals
        if is_open_source is not None:
            self.is_open_source = is_open_source
        if malicious_address is not None:
            self.malicious_address = malicious_address
        if malicious_behavior is not None:
            self.malicious_behavior = malicious_behavior
        if token_address is not None:
            self.token_address = token_address
        if token_name is not None:
            self.token_name = token_name
        if token_symbol is not None:
            self.token_symbol = token_symbol

    @property
    def approved_list(self):
        """Gets the approved_list of this ApproveTokenOutListResponse.  # noqa: E501


        :return: The approved_list of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: list[ApproveTokenResult]
        """
        return self._approved_list

    @approved_list.setter
    def approved_list(self, approved_list):
        """Sets the approved_list of this ApproveTokenOutListResponse.


        :param approved_list: The approved_list of this ApproveTokenOutListResponse.  # noqa: E501
        :type: list[ApproveTokenResult]
        """

        self._approved_list = approved_list

    @property
    def balance(self):
        """Gets the balance of this ApproveTokenOutListResponse.  # noqa: E501

        balance  # noqa: E501

        :return: The balance of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ApproveTokenOutListResponse.

        balance  # noqa: E501

        :param balance: The balance of this ApproveTokenOutListResponse.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def chain_id(self):
        """Gets the chain_id of this ApproveTokenOutListResponse.  # noqa: E501

        ChainID  # noqa: E501

        :return: The chain_id of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this ApproveTokenOutListResponse.

        ChainID  # noqa: E501

        :param chain_id: The chain_id of this ApproveTokenOutListResponse.  # noqa: E501
        :type: str
        """

        self._chain_id = chain_id

    @property
    def decimals(self):
        """Gets the decimals of this ApproveTokenOutListResponse.  # noqa: E501

        decimals  # noqa: E501

        :return: The decimals of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this ApproveTokenOutListResponse.

        decimals  # noqa: E501

        :param decimals: The decimals of this ApproveTokenOutListResponse.  # noqa: E501
        :type: int
        """

        self._decimals = decimals

    @property
    def is_open_source(self):
        """Gets the is_open_source of this ApproveTokenOutListResponse.  # noqa: E501

        Whether the contract is verified on blockchain explorer.  # noqa: E501

        :return: The is_open_source of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: int
        """
        return self._is_open_source

    @is_open_source.setter
    def is_open_source(self, is_open_source):
        """Sets the is_open_source of this ApproveTokenOutListResponse.

        Whether the contract is verified on blockchain explorer.  # noqa: E501

        :param is_open_source: The is_open_source of this ApproveTokenOutListResponse.  # noqa: E501
        :type: int
        """

        self._is_open_source = is_open_source

    @property
    def malicious_address(self):
        """Gets the malicious_address of this ApproveTokenOutListResponse.  # noqa: E501

        Whether the token is malicious or contains high risk.  # noqa: E501

        :return: The malicious_address of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: int
        """
        return self._malicious_address

    @malicious_address.setter
    def malicious_address(self, malicious_address):
        """Sets the malicious_address of this ApproveTokenOutListResponse.

        Whether the token is malicious or contains high risk.  # noqa: E501

        :param malicious_address: The malicious_address of this ApproveTokenOutListResponse.  # noqa: E501
        :type: int
        """

        self._malicious_address = malicious_address

    @property
    def malicious_behavior(self):
        """Gets the malicious_behavior of this ApproveTokenOutListResponse.  # noqa: E501

        Specific malicious behaviors or risks of this token.  # noqa: E501

        :return: The malicious_behavior of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._malicious_behavior

    @malicious_behavior.setter
    def malicious_behavior(self, malicious_behavior):
        """Sets the malicious_behavior of this ApproveTokenOutListResponse.

        Specific malicious behaviors or risks of this token.  # noqa: E501

        :param malicious_behavior: The malicious_behavior of this ApproveTokenOutListResponse.  # noqa: E501
        :type: list[str]
        """

        self._malicious_behavior = malicious_behavior

    @property
    def token_address(self):
        """Gets the token_address of this ApproveTokenOutListResponse.  # noqa: E501

        Token address  # noqa: E501

        :return: The token_address of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address):
        """Sets the token_address of this ApproveTokenOutListResponse.

        Token address  # noqa: E501

        :param token_address: The token_address of this ApproveTokenOutListResponse.  # noqa: E501
        :type: str
        """

        self._token_address = token_address

    @property
    def token_name(self):
        """Gets the token_name of this ApproveTokenOutListResponse.  # noqa: E501

        Token name  # noqa: E501

        :return: The token_name of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this ApproveTokenOutListResponse.

        Token name  # noqa: E501

        :param token_name: The token_name of this ApproveTokenOutListResponse.  # noqa: E501
        :type: str
        """

        self._token_name = token_name

    @property
    def token_symbol(self):
        """Gets the token_symbol of this ApproveTokenOutListResponse.  # noqa: E501

        Token symbol  # noqa: E501

        :return: The token_symbol of this ApproveTokenOutListResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_symbol

    @token_symbol.setter
    def token_symbol(self, token_symbol):
        """Sets the token_symbol of this ApproveTokenOutListResponse.

        Token symbol  # noqa: E501

        :param token_symbol: The token_symbol of this ApproveTokenOutListResponse.  # noqa: E501
        :type: str
        """

        self._token_symbol = token_symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApproveTokenOutListResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApproveTokenOutListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
