# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Contracts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_address': 'str',
        'creator_address': 'str',
        'deployment_time': 'int',
        'is_open_source': 'int',
        'malicious_behavior': 'list[object]',
        'malicious_contract': 'int',
        'malicious_creator': 'int',
        'malicious_creator_behavior': 'list[object]'
    }

    attribute_map = {
        'contract_address': 'contract_address',
        'creator_address': 'creator_address',
        'deployment_time': 'deployment_time',
        'is_open_source': 'is_open_source',
        'malicious_behavior': 'malicious_behavior',
        'malicious_contract': 'malicious_contract',
        'malicious_creator': 'malicious_creator',
        'malicious_creator_behavior': 'malicious_creator_behavior'
    }

    def __init__(self, contract_address=None, creator_address=None, deployment_time=None, is_open_source=None, malicious_behavior=None, malicious_contract=None, malicious_creator=None, malicious_creator_behavior=None):  # noqa: E501
        """Contracts - a model defined in Swagger"""  # noqa: E501
        self._contract_address = None
        self._creator_address = None
        self._deployment_time = None
        self._is_open_source = None
        self._malicious_behavior = None
        self._malicious_contract = None
        self._malicious_creator = None
        self._malicious_creator_behavior = None
        self.discriminator = None
        if contract_address is not None:
            self.contract_address = contract_address
        if creator_address is not None:
            self.creator_address = creator_address
        if deployment_time is not None:
            self.deployment_time = deployment_time
        if is_open_source is not None:
            self.is_open_source = is_open_source
        if malicious_behavior is not None:
            self.malicious_behavior = malicious_behavior
        if malicious_contract is not None:
            self.malicious_contract = malicious_contract
        if malicious_creator is not None:
            self.malicious_creator = malicious_creator
        if malicious_creator_behavior is not None:
            self.malicious_creator_behavior = malicious_creator_behavior

    @property
    def contract_address(self):
        """Gets the contract_address of this Contracts.  # noqa: E501

        It describes the dAap's contract address.  # noqa: E501

        :return: The contract_address of this Contracts.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this Contracts.

        It describes the dAap's contract address.  # noqa: E501

        :param contract_address: The contract_address of this Contracts.  # noqa: E501
        :type: str
        """

        self._contract_address = contract_address

    @property
    def creator_address(self):
        """Gets the creator_address of this Contracts.  # noqa: E501

        It describes the creator address of the contract.  # noqa: E501

        :return: The creator_address of this Contracts.  # noqa: E501
        :rtype: str
        """
        return self._creator_address

    @creator_address.setter
    def creator_address(self, creator_address):
        """Sets the creator_address of this Contracts.

        It describes the creator address of the contract.  # noqa: E501

        :param creator_address: The creator_address of this Contracts.  # noqa: E501
        :type: str
        """

        self._creator_address = creator_address

    @property
    def deployment_time(self):
        """Gets the deployment_time of this Contracts.  # noqa: E501

        It describes the deployed time of the contract.The value is presented as a timestamp. Example: \"deployed_time\": 1626578345  # noqa: E501

        :return: The deployment_time of this Contracts.  # noqa: E501
        :rtype: int
        """
        return self._deployment_time

    @deployment_time.setter
    def deployment_time(self, deployment_time):
        """Sets the deployment_time of this Contracts.

        It describes the deployed time of the contract.The value is presented as a timestamp. Example: \"deployed_time\": 1626578345  # noqa: E501

        :param deployment_time: The deployment_time of this Contracts.  # noqa: E501
        :type: int
        """

        self._deployment_time = deployment_time

    @property
    def is_open_source(self):
        """Gets the is_open_source of this Contracts.  # noqa: E501

        It describes whether this contract is open source. \"1\" means true; \"0\" means false.  # noqa: E501

        :return: The is_open_source of this Contracts.  # noqa: E501
        :rtype: int
        """
        return self._is_open_source

    @is_open_source.setter
    def is_open_source(self, is_open_source):
        """Sets the is_open_source of this Contracts.

        It describes whether this contract is open source. \"1\" means true; \"0\" means false.  # noqa: E501

        :param is_open_source: The is_open_source of this Contracts.  # noqa: E501
        :type: int
        """

        self._is_open_source = is_open_source

    @property
    def malicious_behavior(self):
        """Gets the malicious_behavior of this Contracts.  # noqa: E501

        It describes specific malicious behaviors of the contract.  # noqa: E501

        :return: The malicious_behavior of this Contracts.  # noqa: E501
        :rtype: list[object]
        """
        return self._malicious_behavior

    @malicious_behavior.setter
    def malicious_behavior(self, malicious_behavior):
        """Sets the malicious_behavior of this Contracts.

        It describes specific malicious behaviors of the contract.  # noqa: E501

        :param malicious_behavior: The malicious_behavior of this Contracts.  # noqa: E501
        :type: list[object]
        """

        self._malicious_behavior = malicious_behavior

    @property
    def malicious_contract(self):
        """Gets the malicious_contract of this Contracts.  # noqa: E501

        It describes whether the address is a suspected malicious contract. \"1\" means true; \"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)  # noqa: E501

        :return: The malicious_contract of this Contracts.  # noqa: E501
        :rtype: int
        """
        return self._malicious_contract

    @malicious_contract.setter
    def malicious_contract(self, malicious_contract):
        """Sets the malicious_contract of this Contracts.

        It describes whether the address is a suspected malicious contract. \"1\" means true; \"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)  # noqa: E501

        :param malicious_contract: The malicious_contract of this Contracts.  # noqa: E501
        :type: int
        """

        self._malicious_contract = malicious_contract

    @property
    def malicious_creator(self):
        """Gets the malicious_creator of this Contracts.  # noqa: E501

        It describes whether the creator is a suspected malicious address. \"1\" means true; \"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)  # noqa: E501

        :return: The malicious_creator of this Contracts.  # noqa: E501
        :rtype: int
        """
        return self._malicious_creator

    @malicious_creator.setter
    def malicious_creator(self, malicious_creator):
        """Sets the malicious_creator of this Contracts.

        It describes whether the creator is a suspected malicious address. \"1\" means true; \"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)  # noqa: E501

        :param malicious_creator: The malicious_creator of this Contracts.  # noqa: E501
        :type: int
        """

        self._malicious_creator = malicious_creator

    @property
    def malicious_creator_behavior(self):
        """Gets the malicious_creator_behavior of this Contracts.  # noqa: E501

        It describes specific malicious behaviors of the contract creator.  # noqa: E501

        :return: The malicious_creator_behavior of this Contracts.  # noqa: E501
        :rtype: list[object]
        """
        return self._malicious_creator_behavior

    @malicious_creator_behavior.setter
    def malicious_creator_behavior(self, malicious_creator_behavior):
        """Sets the malicious_creator_behavior of this Contracts.

        It describes specific malicious behaviors of the contract creator.  # noqa: E501

        :param malicious_creator_behavior: The malicious_creator_behavior of this Contracts.  # noqa: E501
        :type: list[object]
        """

        self._malicious_creator_behavior = malicious_creator_behavior

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contracts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contracts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
