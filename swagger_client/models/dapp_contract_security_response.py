# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DappContractSecurityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_info': 'list[AuditInfo]',
        'contracts_security': 'list[ContractsSecurity]',
        'is_audit': 'int',
        'project_name': 'str',
        'trust_list': 'int',
        'url': 'str'
    }

    attribute_map = {
        'audit_info': 'audit_info',
        'contracts_security': 'contracts_security',
        'is_audit': 'is_audit',
        'project_name': 'project_name',
        'trust_list': 'trust_list',
        'url': 'url'
    }

    def __init__(self, audit_info=None, contracts_security=None, is_audit=None, project_name=None, trust_list=None, url=None):  # noqa: E501
        """DappContractSecurityResponse - a model defined in Swagger"""  # noqa: E501
        self._audit_info = None
        self._contracts_security = None
        self._is_audit = None
        self._project_name = None
        self._trust_list = None
        self._url = None
        self.discriminator = None
        if audit_info is not None:
            self.audit_info = audit_info
        if contracts_security is not None:
            self.contracts_security = contracts_security
        if is_audit is not None:
            self.is_audit = is_audit
        if project_name is not None:
            self.project_name = project_name
        if trust_list is not None:
            self.trust_list = trust_list
        if url is not None:
            self.url = url

    @property
    def audit_info(self):
        """Gets the audit_info of this DappContractSecurityResponse.  # noqa: E501

        audit info(Notice:When the dApp was not audited, (\"is_audit\"=0), it will return \"null\".If there are multiple audit reports, the information of the latest audit report is displayed.)  # noqa: E501

        :return: The audit_info of this DappContractSecurityResponse.  # noqa: E501
        :rtype: list[AuditInfo]
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this DappContractSecurityResponse.

        audit info(Notice:When the dApp was not audited, (\"is_audit\"=0), it will return \"null\".If there are multiple audit reports, the information of the latest audit report is displayed.)  # noqa: E501

        :param audit_info: The audit_info of this DappContractSecurityResponse.  # noqa: E501
        :type: list[AuditInfo]
        """

        self._audit_info = audit_info

    @property
    def contracts_security(self):
        """Gets the contracts_security of this DappContractSecurityResponse.  # noqa: E501


        :return: The contracts_security of this DappContractSecurityResponse.  # noqa: E501
        :rtype: list[ContractsSecurity]
        """
        return self._contracts_security

    @contracts_security.setter
    def contracts_security(self, contracts_security):
        """Sets the contracts_security of this DappContractSecurityResponse.


        :param contracts_security: The contracts_security of this DappContractSecurityResponse.  # noqa: E501
        :type: list[ContractsSecurity]
        """

        self._contracts_security = contracts_security

    @property
    def is_audit(self):
        """Gets the is_audit of this DappContractSecurityResponse.  # noqa: E501

        It describes whether the dApp was audited by a reputable audit firm. \"1\" means true; \"0\" means that we have not found audit information for this dApp .(Notice:Return \"0\" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)  # noqa: E501

        :return: The is_audit of this DappContractSecurityResponse.  # noqa: E501
        :rtype: int
        """
        return self._is_audit

    @is_audit.setter
    def is_audit(self, is_audit):
        """Sets the is_audit of this DappContractSecurityResponse.

        It describes whether the dApp was audited by a reputable audit firm. \"1\" means true; \"0\" means that we have not found audit information for this dApp .(Notice:Return \"0\" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)  # noqa: E501

        :param is_audit: The is_audit of this DappContractSecurityResponse.  # noqa: E501
        :type: int
        """

        self._is_audit = is_audit

    @property
    def project_name(self):
        """Gets the project_name of this DappContractSecurityResponse.  # noqa: E501

        It describes the dApp project name.  # noqa: E501

        :return: The project_name of this DappContractSecurityResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DappContractSecurityResponse.

        It describes the dApp project name.  # noqa: E501

        :param project_name: The project_name of this DappContractSecurityResponse.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def trust_list(self):
        """Gets the trust_list of this DappContractSecurityResponse.  # noqa: E501

        It describes whether the dapp is a famous and trustworthy one. \"1\" means true;  \"0\" means that this dapp is not yet in our trusted list.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy dapp.  (2) \"0\" return doesn't mean it is risky.)  # noqa: E501

        :return: The trust_list of this DappContractSecurityResponse.  # noqa: E501
        :rtype: int
        """
        return self._trust_list

    @trust_list.setter
    def trust_list(self, trust_list):
        """Sets the trust_list of this DappContractSecurityResponse.

        It describes whether the dapp is a famous and trustworthy one. \"1\" means true;  \"0\" means that this dapp is not yet in our trusted list.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy dapp.  (2) \"0\" return doesn't mean it is risky.)  # noqa: E501

        :param trust_list: The trust_list of this DappContractSecurityResponse.  # noqa: E501
        :type: int
        """

        self._trust_list = trust_list

    @property
    def url(self):
        """Gets the url of this DappContractSecurityResponse.  # noqa: E501

        It describes the dApp's website link.  # noqa: E501

        :return: The url of this DappContractSecurityResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DappContractSecurityResponse.

        It describes the dApp's website link.  # noqa: E501

        :param url: The url of this DappContractSecurityResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DappContractSecurityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DappContractSecurityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
