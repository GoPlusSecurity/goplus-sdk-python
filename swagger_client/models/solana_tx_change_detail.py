# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SolanaTxChangeDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'post_amount': 'str',
        'address': 'str',
        'amount_changes': 'str',
        'risky_address': 'int',
        'from_address': 'int',
        'pre_amount': 'str'
    }

    attribute_map = {
        'owner': 'owner',
        'post_amount': 'post_amount',
        'address': 'address',
        'amount_changes': 'amount_changes',
        'risky_address': 'risky_address',
        'from_address': 'from_address',
        'pre_amount': 'pre_amount'
    }

    def __init__(self, owner=None, post_amount=None, address=None, amount_changes=None, risky_address=None, from_address=None, pre_amount=None):  # noqa: E501
        """SolanaTxChangeDetail - a model defined in Swagger"""  # noqa: E501
        self._owner = None
        self._post_amount = None
        self._address = None
        self._amount_changes = None
        self._risky_address = None
        self._from_address = None
        self._pre_amount = None
        self.discriminator = None
        if owner is not None:
            self.owner = owner
        if post_amount is not None:
            self.post_amount = post_amount
        if address is not None:
            self.address = address
        if amount_changes is not None:
            self.amount_changes = amount_changes
        if risky_address is not None:
            self.risky_address = risky_address
        if from_address is not None:
            self.from_address = from_address
        if pre_amount is not None:
            self.pre_amount = pre_amount

    @property
    def owner(self):
        """Gets the owner of this SolanaTxChangeDetail.  # noqa: E501


        :return: The owner of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SolanaTxChangeDetail.


        :param owner: The owner of this SolanaTxChangeDetail.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def post_amount(self):
        """Gets the post_amount of this SolanaTxChangeDetail.  # noqa: E501


        :return: The post_amount of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._post_amount

    @post_amount.setter
    def post_amount(self, post_amount):
        """Sets the post_amount of this SolanaTxChangeDetail.


        :param post_amount: The post_amount of this SolanaTxChangeDetail.  # noqa: E501
        :type: str
        """

        self._post_amount = post_amount

    @property
    def address(self):
        """Gets the address of this SolanaTxChangeDetail.  # noqa: E501


        :return: The address of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SolanaTxChangeDetail.


        :param address: The address of this SolanaTxChangeDetail.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def amount_changes(self):
        """Gets the amount_changes of this SolanaTxChangeDetail.  # noqa: E501


        :return: The amount_changes of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._amount_changes

    @amount_changes.setter
    def amount_changes(self, amount_changes):
        """Sets the amount_changes of this SolanaTxChangeDetail.


        :param amount_changes: The amount_changes of this SolanaTxChangeDetail.  # noqa: E501
        :type: str
        """

        self._amount_changes = amount_changes

    @property
    def risky_address(self):
        """Gets the risky_address of this SolanaTxChangeDetail.  # noqa: E501


        :return: The risky_address of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: int
        """
        return self._risky_address

    @risky_address.setter
    def risky_address(self, risky_address):
        """Sets the risky_address of this SolanaTxChangeDetail.


        :param risky_address: The risky_address of this SolanaTxChangeDetail.  # noqa: E501
        :type: int
        """

        self._risky_address = risky_address

    @property
    def from_address(self):
        """Gets the from_address of this SolanaTxChangeDetail.  # noqa: E501


        :return: The from_address of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: int
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this SolanaTxChangeDetail.


        :param from_address: The from_address of this SolanaTxChangeDetail.  # noqa: E501
        :type: int
        """

        self._from_address = from_address

    @property
    def pre_amount(self):
        """Gets the pre_amount of this SolanaTxChangeDetail.  # noqa: E501


        :return: The pre_amount of this SolanaTxChangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._pre_amount

    @pre_amount.setter
    def pre_amount(self, pre_amount):
        """Sets the pre_amount of this SolanaTxChangeDetail.


        :param pre_amount: The pre_amount of this SolanaTxChangeDetail.  # noqa: E501
        :type: str
        """

        self._pre_amount = pre_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SolanaTxChangeDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SolanaTxChangeDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
