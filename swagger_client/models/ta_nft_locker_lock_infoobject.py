# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaNftLockerLockInfoobject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'int',
        'lock_id': 'str',
        'nft_id': 'str',
        'nft_position_manager': 'str',
        'owner': 'str',
        'pool': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'end_time': 'endTime',
        'lock_id': 'lockId',
        'nft_id': 'nftId',
        'nft_position_manager': 'nftPositionManager',
        'owner': 'owner',
        'pool': 'pool',
        'start_time': 'startTime'
    }

    def __init__(self, end_time=None, lock_id=None, nft_id=None, nft_position_manager=None, owner=None, pool=None, start_time=None):  # noqa: E501
        """TaNftLockerLockInfoobject - a model defined in Swagger"""  # noqa: E501
        self._end_time = None
        self._lock_id = None
        self._nft_id = None
        self._nft_position_manager = None
        self._owner = None
        self._pool = None
        self._start_time = None
        self.discriminator = None
        if end_time is not None:
            self.end_time = end_time
        if lock_id is not None:
            self.lock_id = lock_id
        if nft_id is not None:
            self.nft_id = nft_id
        if nft_position_manager is not None:
            self.nft_position_manager = nft_position_manager
        if owner is not None:
            self.owner = owner
        if pool is not None:
            self.pool = pool
        if start_time is not None:
            self.start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TaNftLockerLockInfoobject.  # noqa: E501

        解锁时间戳  # noqa: E501

        :return: The end_time of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaNftLockerLockInfoobject.

        解锁时间戳  # noqa: E501

        :param end_time: The end_time of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def lock_id(self):
        """Gets the lock_id of this TaNftLockerLockInfoobject.  # noqa: E501

        lock id  # noqa: E501

        :return: The lock_id of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._lock_id

    @lock_id.setter
    def lock_id(self, lock_id):
        """Sets the lock_id of this TaNftLockerLockInfoobject.

        lock id  # noqa: E501

        :param lock_id: The lock_id of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._lock_id = lock_id

    @property
    def nft_id(self):
        """Gets the nft_id of this TaNftLockerLockInfoobject.  # noqa: E501

        nft id  # noqa: E501

        :return: The nft_id of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._nft_id

    @nft_id.setter
    def nft_id(self, nft_id):
        """Sets the nft_id of this TaNftLockerLockInfoobject.

        nft id  # noqa: E501

        :param nft_id: The nft_id of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._nft_id = nft_id

    @property
    def nft_position_manager(self):
        """Gets the nft_position_manager of this TaNftLockerLockInfoobject.  # noqa: E501

        nft Position Manager  # noqa: E501

        :return: The nft_position_manager of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._nft_position_manager

    @nft_position_manager.setter
    def nft_position_manager(self, nft_position_manager):
        """Sets the nft_position_manager of this TaNftLockerLockInfoobject.

        nft Position Manager  # noqa: E501

        :param nft_position_manager: The nft_position_manager of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._nft_position_manager = nft_position_manager

    @property
    def owner(self):
        """Gets the owner of this TaNftLockerLockInfoobject.  # noqa: E501

        用户地址 address  # noqa: E501

        :return: The owner of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TaNftLockerLockInfoobject.

        用户地址 address  # noqa: E501

        :param owner: The owner of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def pool(self):
        """Gets the pool of this TaNftLockerLockInfoobject.  # noqa: E501

        pool address  # noqa: E501

        :return: The pool of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this TaNftLockerLockInfoobject.

        pool address  # noqa: E501

        :param pool: The pool of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def start_time(self):
        """Gets the start_time of this TaNftLockerLockInfoobject.  # noqa: E501

        开始时间戳  # noqa: E501

        :return: The start_time of this TaNftLockerLockInfoobject.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaNftLockerLockInfoobject.

        开始时间戳  # noqa: E501

        :param start_time: The start_time of this TaNftLockerLockInfoobject.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaNftLockerLockInfoobject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaNftLockerLockInfoobject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
