# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit_firm': 'str',
        'audit_link': 'str',
        'audit_time': 'str'
    }

    attribute_map = {
        'audit_firm': 'audit_firm',
        'audit_link': 'audit_link',
        'audit_time': 'audit_time'
    }

    def __init__(self, audit_firm=None, audit_link=None, audit_time=None):  # noqa: E501
        """AuditInfo - a model defined in Swagger"""  # noqa: E501
        self._audit_firm = None
        self._audit_link = None
        self._audit_time = None
        self.discriminator = None
        if audit_firm is not None:
            self.audit_firm = audit_firm
        if audit_link is not None:
            self.audit_link = audit_link
        if audit_time is not None:
            self.audit_time = audit_time

    @property
    def audit_firm(self):
        """Gets the audit_firm of this AuditInfo.  # noqa: E501

        It describes the firm that audited the dApp.  # noqa: E501

        :return: The audit_firm of this AuditInfo.  # noqa: E501
        :rtype: str
        """
        return self._audit_firm

    @audit_firm.setter
    def audit_firm(self, audit_firm):
        """Sets the audit_firm of this AuditInfo.

        It describes the firm that audited the dApp.  # noqa: E501

        :param audit_firm: The audit_firm of this AuditInfo.  # noqa: E501
        :type: str
        """

        self._audit_firm = audit_firm

    @property
    def audit_link(self):
        """Gets the audit_link of this AuditInfo.  # noqa: E501

        It describes the website link of the audit report.  # noqa: E501

        :return: The audit_link of this AuditInfo.  # noqa: E501
        :rtype: str
        """
        return self._audit_link

    @audit_link.setter
    def audit_link(self, audit_link):
        """Sets the audit_link of this AuditInfo.

        It describes the website link of the audit report.  # noqa: E501

        :param audit_link: The audit_link of this AuditInfo.  # noqa: E501
        :type: str
        """

        self._audit_link = audit_link

    @property
    def audit_time(self):
        """Gets the audit_time of this AuditInfo.  # noqa: E501

        It describes the time shown in the latest audit report.  # noqa: E501

        :return: The audit_time of this AuditInfo.  # noqa: E501
        :rtype: str
        """
        return self._audit_time

    @audit_time.setter
    def audit_time(self, audit_time):
        """Sets the audit_time of this AuditInfo.

        It describes the time shown in the latest audit report.  # noqa: E501

        :param audit_time: The audit_time of this AuditInfo.  # noqa: E501
        :type: str
        """

        self._audit_time = audit_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
