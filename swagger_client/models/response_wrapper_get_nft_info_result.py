# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperGetNftInfoResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'traded_volume_24h': 'float',
        'total_volume': 'float',
        'red_check_mark': 'int',
        'nft_proxy': 'int',
        'restricted_approval': 'int',
        'highest_price': 'float',
        'transfer_without_approval': 'ResponseWrapperGetNftInfoResultTransferWithoutApproval',
        'discord_url': 'str',
        'nft_open_source': 'int',
        'privileged_minting': 'ResponseWrapperGetNftInfoResultPrivilegedMinting',
        'nft_owner_number': 'int',
        'trust_list': 'int',
        'token_id': 'str',
        'lowest_price_24h': 'float',
        'average_price_24h': 'float',
        'nft_erc': 'str',
        'creator_address': 'str',
        'medium_url': 'str',
        'malicious_nft_contract': 'int',
        'privileged_burn': 'ResponseWrapperGetNftInfoResultPrivilegedBurn',
        'twitter_url': 'str',
        'nft_symbol': 'str',
        'nft_description': 'str',
        'self_destruct': 'ResponseWrapperGetNftInfoResultSelfDestruct',
        'metadata_frozen': 'int',
        'token_owner': 'str',
        'nft_verified': 'int',
        'same_nfts': 'list[ResponseWrapperGetNftInfoResultSameNfts]',
        'nft_items': 'int',
        'oversupply_minting': 'int',
        'nft_name': 'str',
        'website_url': 'str',
        'github_url': 'str',
        'telegram_url': 'str',
        'sales_24h': 'float',
        'create_block_number': 'int'
    }

    attribute_map = {
        'traded_volume_24h': 'traded_volume_24h',
        'total_volume': 'total_volume',
        'red_check_mark': 'red_check_mark',
        'nft_proxy': 'nft_proxy',
        'restricted_approval': 'restricted_approval',
        'highest_price': 'highest_price',
        'transfer_without_approval': 'transfer_without_approval',
        'discord_url': 'discord_url',
        'nft_open_source': 'nft_open_source',
        'privileged_minting': 'privileged_minting',
        'nft_owner_number': 'nft_owner_number',
        'trust_list': 'trust_list',
        'token_id': 'token_id',
        'lowest_price_24h': 'lowest_price_24h',
        'average_price_24h': 'average_price_24h',
        'nft_erc': 'nft_erc',
        'creator_address': 'creator_address',
        'medium_url': 'medium_url',
        'malicious_nft_contract': 'malicious_nft_contract',
        'privileged_burn': 'privileged_burn',
        'twitter_url': 'twitter_url',
        'nft_symbol': 'nft_symbol',
        'nft_description': 'nft_description',
        'self_destruct': 'self_destruct',
        'metadata_frozen': 'metadata_frozen',
        'token_owner': 'token_owner',
        'nft_verified': 'nft_verified',
        'same_nfts': 'same_nfts',
        'nft_items': 'nft_items',
        'oversupply_minting': 'oversupply_minting',
        'nft_name': 'nft_name',
        'website_url': 'website_url',
        'github_url': 'github_url',
        'telegram_url': 'telegram_url',
        'sales_24h': 'sales_24h',
        'create_block_number': 'create_block_number'
    }

    def __init__(self, traded_volume_24h=None, total_volume=None, red_check_mark=None, nft_proxy=None, restricted_approval=None, highest_price=None, transfer_without_approval=None, discord_url=None, nft_open_source=None, privileged_minting=None, nft_owner_number=None, trust_list=None, token_id=None, lowest_price_24h=None, average_price_24h=None, nft_erc=None, creator_address=None, medium_url=None, malicious_nft_contract=None, privileged_burn=None, twitter_url=None, nft_symbol=None, nft_description=None, self_destruct=None, metadata_frozen=None, token_owner=None, nft_verified=None, same_nfts=None, nft_items=None, oversupply_minting=None, nft_name=None, website_url=None, github_url=None, telegram_url=None, sales_24h=None, create_block_number=None):  # noqa: E501
        """ResponseWrapperGetNftInfoResult - a model defined in Swagger"""  # noqa: E501
        self._traded_volume_24h = None
        self._total_volume = None
        self._red_check_mark = None
        self._nft_proxy = None
        self._restricted_approval = None
        self._highest_price = None
        self._transfer_without_approval = None
        self._discord_url = None
        self._nft_open_source = None
        self._privileged_minting = None
        self._nft_owner_number = None
        self._trust_list = None
        self._token_id = None
        self._lowest_price_24h = None
        self._average_price_24h = None
        self._nft_erc = None
        self._creator_address = None
        self._medium_url = None
        self._malicious_nft_contract = None
        self._privileged_burn = None
        self._twitter_url = None
        self._nft_symbol = None
        self._nft_description = None
        self._self_destruct = None
        self._metadata_frozen = None
        self._token_owner = None
        self._nft_verified = None
        self._same_nfts = None
        self._nft_items = None
        self._oversupply_minting = None
        self._nft_name = None
        self._website_url = None
        self._github_url = None
        self._telegram_url = None
        self._sales_24h = None
        self._create_block_number = None
        self.discriminator = None
        if traded_volume_24h is not None:
            self.traded_volume_24h = traded_volume_24h
        if total_volume is not None:
            self.total_volume = total_volume
        if red_check_mark is not None:
            self.red_check_mark = red_check_mark
        if nft_proxy is not None:
            self.nft_proxy = nft_proxy
        if restricted_approval is not None:
            self.restricted_approval = restricted_approval
        if highest_price is not None:
            self.highest_price = highest_price
        if transfer_without_approval is not None:
            self.transfer_without_approval = transfer_without_approval
        if discord_url is not None:
            self.discord_url = discord_url
        if nft_open_source is not None:
            self.nft_open_source = nft_open_source
        if privileged_minting is not None:
            self.privileged_minting = privileged_minting
        if nft_owner_number is not None:
            self.nft_owner_number = nft_owner_number
        if trust_list is not None:
            self.trust_list = trust_list
        if token_id is not None:
            self.token_id = token_id
        if lowest_price_24h is not None:
            self.lowest_price_24h = lowest_price_24h
        if average_price_24h is not None:
            self.average_price_24h = average_price_24h
        if nft_erc is not None:
            self.nft_erc = nft_erc
        if creator_address is not None:
            self.creator_address = creator_address
        if medium_url is not None:
            self.medium_url = medium_url
        if malicious_nft_contract is not None:
            self.malicious_nft_contract = malicious_nft_contract
        if privileged_burn is not None:
            self.privileged_burn = privileged_burn
        if twitter_url is not None:
            self.twitter_url = twitter_url
        if nft_symbol is not None:
            self.nft_symbol = nft_symbol
        if nft_description is not None:
            self.nft_description = nft_description
        if self_destruct is not None:
            self.self_destruct = self_destruct
        if metadata_frozen is not None:
            self.metadata_frozen = metadata_frozen
        if token_owner is not None:
            self.token_owner = token_owner
        if nft_verified is not None:
            self.nft_verified = nft_verified
        if same_nfts is not None:
            self.same_nfts = same_nfts
        if nft_items is not None:
            self.nft_items = nft_items
        if oversupply_minting is not None:
            self.oversupply_minting = oversupply_minting
        if nft_name is not None:
            self.nft_name = nft_name
        if website_url is not None:
            self.website_url = website_url
        if github_url is not None:
            self.github_url = github_url
        if telegram_url is not None:
            self.telegram_url = telegram_url
        if sales_24h is not None:
            self.sales_24h = sales_24h
        if create_block_number is not None:
            self.create_block_number = create_block_number

    @property
    def traded_volume_24h(self):
        """Gets the traded_volume_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the trading volume of the NFT in 24h.  # noqa: E501

        :return: The traded_volume_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._traded_volume_24h

    @traded_volume_24h.setter
    def traded_volume_24h(self, traded_volume_24h):
        """Sets the traded_volume_24h of this ResponseWrapperGetNftInfoResult.

        It describes the trading volume of the NFT in 24h.  # noqa: E501

        :param traded_volume_24h: The traded_volume_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._traded_volume_24h = traded_volume_24h

    @property
    def total_volume(self):
        """Gets the total_volume of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the total volume of the NFT.  # noqa: E501

        :return: The total_volume of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """Sets the total_volume of this ResponseWrapperGetNftInfoResult.

        It describes the total volume of the NFT.  # noqa: E501

        :param total_volume: The total_volume of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._total_volume = total_volume

    @property
    def red_check_mark(self):
        """Gets the red_check_mark of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        red check mark  # noqa: E501

        :return: The red_check_mark of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._red_check_mark

    @red_check_mark.setter
    def red_check_mark(self, red_check_mark):
        """Sets the red_check_mark of this ResponseWrapperGetNftInfoResult.

        red check mark  # noqa: E501

        :param red_check_mark: The red_check_mark of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._red_check_mark = red_check_mark

    @property
    def nft_proxy(self):
        """Gets the nft_proxy of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether this NFT contract has a proxy contract.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:(1) When \"is_open_source\": \"0\", it will return \"null\". (2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)  # noqa: E501

        :return: The nft_proxy of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._nft_proxy

    @nft_proxy.setter
    def nft_proxy(self, nft_proxy):
        """Sets the nft_proxy of this ResponseWrapperGetNftInfoResult.

        It describes whether this NFT contract has a proxy contract.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:(1) When \"is_open_source\": \"0\", it will return \"null\". (2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)  # noqa: E501

        :param nft_proxy: The nft_proxy of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._nft_proxy = nft_proxy

    @property
    def restricted_approval(self):
        """Gets the restricted_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX. \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)  # noqa: E501

        :return: The restricted_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._restricted_approval

    @restricted_approval.setter
    def restricted_approval(self, restricted_approval):
        """Sets the restricted_approval of this ResponseWrapperGetNftInfoResult.

        It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX. \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)  # noqa: E501

        :param restricted_approval: The restricted_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._restricted_approval = restricted_approval

    @property
    def highest_price(self):
        """Gets the highest_price of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the highest price of the NFT.  # noqa: E501

        :return: The highest_price of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._highest_price

    @highest_price.setter
    def highest_price(self, highest_price):
        """Sets the highest_price of this ResponseWrapperGetNftInfoResult.

        It describes the highest price of the NFT.  # noqa: E501

        :param highest_price: The highest_price of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._highest_price = highest_price

    @property
    def transfer_without_approval(self):
        """Gets the transfer_without_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501


        :return: The transfer_without_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: ResponseWrapperGetNftInfoResultTransferWithoutApproval
        """
        return self._transfer_without_approval

    @transfer_without_approval.setter
    def transfer_without_approval(self, transfer_without_approval):
        """Sets the transfer_without_approval of this ResponseWrapperGetNftInfoResult.


        :param transfer_without_approval: The transfer_without_approval of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: ResponseWrapperGetNftInfoResultTransferWithoutApproval
        """

        self._transfer_without_approval = transfer_without_approval

    @property
    def discord_url(self):
        """Gets the discord_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the discord url of the NFT. Return “null” means there is no discord url or didn't find the discord url.  # noqa: E501

        :return: The discord_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._discord_url

    @discord_url.setter
    def discord_url(self, discord_url):
        """Sets the discord_url of this ResponseWrapperGetNftInfoResult.

        It describes the discord url of the NFT. Return “null” means there is no discord url or didn't find the discord url.  # noqa: E501

        :param discord_url: The discord_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._discord_url = discord_url

    @property
    def nft_open_source(self):
        """Gets the nft_open_source of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether this contract is open source.  \"1\" means true;  \"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)  # noqa: E501

        :return: The nft_open_source of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._nft_open_source

    @nft_open_source.setter
    def nft_open_source(self, nft_open_source):
        """Sets the nft_open_source of this ResponseWrapperGetNftInfoResult.

        It describes whether this contract is open source.  \"1\" means true;  \"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)  # noqa: E501

        :param nft_open_source: The nft_open_source of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._nft_open_source = nft_open_source

    @property
    def privileged_minting(self):
        """Gets the privileged_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501


        :return: The privileged_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: ResponseWrapperGetNftInfoResultPrivilegedMinting
        """
        return self._privileged_minting

    @privileged_minting.setter
    def privileged_minting(self, privileged_minting):
        """Sets the privileged_minting of this ResponseWrapperGetNftInfoResult.


        :param privileged_minting: The privileged_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: ResponseWrapperGetNftInfoResultPrivilegedMinting
        """

        self._privileged_minting = privileged_minting

    @property
    def nft_owner_number(self):
        """Gets the nft_owner_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the holders of the NFT.  # noqa: E501

        :return: The nft_owner_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._nft_owner_number

    @nft_owner_number.setter
    def nft_owner_number(self, nft_owner_number):
        """Sets the nft_owner_number of this ResponseWrapperGetNftInfoResult.

        It describes the holders of the NFT.  # noqa: E501

        :param nft_owner_number: The nft_owner_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._nft_owner_number = nft_owner_number

    @property
    def trust_list(self):
        """Gets the trust_list of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether the NFT is a famous and trustworthy one. \"1\" means true;  Return \"null\" means no result.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy NFT. (2) Return \"null\" doesn't mean it is risky.Th)  # noqa: E501

        :return: The trust_list of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._trust_list

    @trust_list.setter
    def trust_list(self, trust_list):
        """Sets the trust_list of this ResponseWrapperGetNftInfoResult.

        It describes whether the NFT is a famous and trustworthy one. \"1\" means true;  Return \"null\" means no result.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy NFT. (2) Return \"null\" doesn't mean it is risky.Th)  # noqa: E501

        :param trust_list: The trust_list of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._trust_list = trust_list

    @property
    def token_id(self):
        """Gets the token_id of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        token_id  # noqa: E501

        :return: The token_id of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ResponseWrapperGetNftInfoResult.

        token_id  # noqa: E501

        :param token_id: The token_id of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def lowest_price_24h(self):
        """Gets the lowest_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the lowest price of the NFT in 24h.  # noqa: E501

        :return: The lowest_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._lowest_price_24h

    @lowest_price_24h.setter
    def lowest_price_24h(self, lowest_price_24h):
        """Sets the lowest_price_24h of this ResponseWrapperGetNftInfoResult.

        It describes the lowest price of the NFT in 24h.  # noqa: E501

        :param lowest_price_24h: The lowest_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._lowest_price_24h = lowest_price_24h

    @property
    def average_price_24h(self):
        """Gets the average_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the average price of the NFT in 24h.  # noqa: E501

        :return: The average_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._average_price_24h

    @average_price_24h.setter
    def average_price_24h(self, average_price_24h):
        """Sets the average_price_24h of this ResponseWrapperGetNftInfoResult.

        It describes the average price of the NFT in 24h.  # noqa: E501

        :param average_price_24h: The average_price_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._average_price_24h = average_price_24h

    @property
    def nft_erc(self):
        """Gets the nft_erc of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the ERC protocol of the NFT. Example: \"nft_erc\": \"erc721\"  # noqa: E501

        :return: The nft_erc of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._nft_erc

    @nft_erc.setter
    def nft_erc(self, nft_erc):
        """Sets the nft_erc of this ResponseWrapperGetNftInfoResult.

        It describes the ERC protocol of the NFT. Example: \"nft_erc\": \"erc721\"  # noqa: E501

        :param nft_erc: The nft_erc of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._nft_erc = nft_erc

    @property
    def creator_address(self):
        """Gets the creator_address of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the creator address of the NFT. Example: \"creator_address\": \"0x1ee0af784b96bb55ece98c9b15675726b0da1b6b\"; Return “null” means that we didn't find the creator address.  # noqa: E501

        :return: The creator_address of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._creator_address

    @creator_address.setter
    def creator_address(self, creator_address):
        """Sets the creator_address of this ResponseWrapperGetNftInfoResult.

        It describes the creator address of the NFT. Example: \"creator_address\": \"0x1ee0af784b96bb55ece98c9b15675726b0da1b6b\"; Return “null” means that we didn't find the creator address.  # noqa: E501

        :param creator_address: The creator_address of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._creator_address = creator_address

    @property
    def medium_url(self):
        """Gets the medium_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the medium url of the NFT. Return “null” means there is no medium url or didn't find the medium url.  # noqa: E501

        :return: The medium_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._medium_url

    @medium_url.setter
    def medium_url(self, medium_url):
        """Sets the medium_url of this ResponseWrapperGetNftInfoResult.

        It describes the medium url of the NFT. Return “null” means there is no medium url or didn't find the medium url.  # noqa: E501

        :param medium_url: The medium_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._medium_url = medium_url

    @property
    def malicious_nft_contract(self):
        """Gets the malicious_nft_contract of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether this NFT has performed malicious behaviors. \"1\" means true; \"0\" means false.(Notice:Malicious behaviors include random additions, blacklist abuse, falsified transactions, and other high-risk behaviors. Interacting with NFTs flagged as Malicious may contain a high level of risk)  # noqa: E501

        :return: The malicious_nft_contract of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._malicious_nft_contract

    @malicious_nft_contract.setter
    def malicious_nft_contract(self, malicious_nft_contract):
        """Sets the malicious_nft_contract of this ResponseWrapperGetNftInfoResult.

        It describes whether this NFT has performed malicious behaviors. \"1\" means true; \"0\" means false.(Notice:Malicious behaviors include random additions, blacklist abuse, falsified transactions, and other high-risk behaviors. Interacting with NFTs flagged as Malicious may contain a high level of risk)  # noqa: E501

        :param malicious_nft_contract: The malicious_nft_contract of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._malicious_nft_contract = malicious_nft_contract

    @property
    def privileged_burn(self):
        """Gets the privileged_burn of this ResponseWrapperGetNftInfoResult.  # noqa: E501


        :return: The privileged_burn of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: ResponseWrapperGetNftInfoResultPrivilegedBurn
        """
        return self._privileged_burn

    @privileged_burn.setter
    def privileged_burn(self, privileged_burn):
        """Sets the privileged_burn of this ResponseWrapperGetNftInfoResult.


        :param privileged_burn: The privileged_burn of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: ResponseWrapperGetNftInfoResultPrivilegedBurn
        """

        self._privileged_burn = privileged_burn

    @property
    def twitter_url(self):
        """Gets the twitter_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the twitter url of the NFT. Return “null” means there is no twitter url or didn't find the twitter url.  # noqa: E501

        :return: The twitter_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._twitter_url

    @twitter_url.setter
    def twitter_url(self, twitter_url):
        """Sets the twitter_url of this ResponseWrapperGetNftInfoResult.

        It describes the twitter url of the NFT. Return “null” means there is no twitter url or didn't find the twitter url.  # noqa: E501

        :param twitter_url: The twitter_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._twitter_url = twitter_url

    @property
    def nft_symbol(self):
        """Gets the nft_symbol of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        nft_symbol  # noqa: E501

        :return: The nft_symbol of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._nft_symbol

    @nft_symbol.setter
    def nft_symbol(self, nft_symbol):
        """Sets the nft_symbol of this ResponseWrapperGetNftInfoResult.

        nft_symbol  # noqa: E501

        :param nft_symbol: The nft_symbol of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._nft_symbol = nft_symbol

    @property
    def nft_description(self):
        """Gets the nft_description of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the introduction of the NFT. Return “null” means there is no description of the NFT.  # noqa: E501

        :return: The nft_description of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._nft_description

    @nft_description.setter
    def nft_description(self, nft_description):
        """Sets the nft_description of this ResponseWrapperGetNftInfoResult.

        It describes the introduction of the NFT. Return “null” means there is no description of the NFT.  # noqa: E501

        :param nft_description: The nft_description of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._nft_description = nft_description

    @property
    def self_destruct(self):
        """Gets the self_destruct of this ResponseWrapperGetNftInfoResult.  # noqa: E501


        :return: The self_destruct of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: ResponseWrapperGetNftInfoResultSelfDestruct
        """
        return self._self_destruct

    @self_destruct.setter
    def self_destruct(self, self_destruct):
        """Sets the self_destruct of this ResponseWrapperGetNftInfoResult.


        :param self_destruct: The self_destruct of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: ResponseWrapperGetNftInfoResultSelfDestruct
        """

        self._self_destruct = self_destruct

    @property
    def metadata_frozen(self):
        """Gets the metadata_frozen of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        metadata_frozen  # noqa: E501

        :return: The metadata_frozen of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._metadata_frozen

    @metadata_frozen.setter
    def metadata_frozen(self, metadata_frozen):
        """Sets the metadata_frozen of this ResponseWrapperGetNftInfoResult.

        metadata_frozen  # noqa: E501

        :param metadata_frozen: The metadata_frozen of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._metadata_frozen = metadata_frozen

    @property
    def token_owner(self):
        """Gets the token_owner of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        token_owner  # noqa: E501

        :return: The token_owner of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._token_owner

    @token_owner.setter
    def token_owner(self, token_owner):
        """Sets the token_owner of this ResponseWrapperGetNftInfoResult.

        token_owner  # noqa: E501

        :param token_owner: The token_owner of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._token_owner = token_owner

    @property
    def nft_verified(self):
        """Gets the nft_verified of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether the NFT is verified. \"1\" means that the NFT is verified; \"0\" means that we did not find any information about whether the NFT is verified.  # noqa: E501

        :return: The nft_verified of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._nft_verified

    @nft_verified.setter
    def nft_verified(self, nft_verified):
        """Sets the nft_verified of this ResponseWrapperGetNftInfoResult.

        It describes whether the NFT is verified. \"1\" means that the NFT is verified; \"0\" means that we did not find any information about whether the NFT is verified.  # noqa: E501

        :param nft_verified: The nft_verified of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._nft_verified = nft_verified

    @property
    def same_nfts(self):
        """Gets the same_nfts of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the info of other NFTs with duplicate name and symbol.  # noqa: E501

        :return: The same_nfts of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: list[ResponseWrapperGetNftInfoResultSameNfts]
        """
        return self._same_nfts

    @same_nfts.setter
    def same_nfts(self, same_nfts):
        """Sets the same_nfts of this ResponseWrapperGetNftInfoResult.

        It describes the info of other NFTs with duplicate name and symbol.  # noqa: E501

        :param same_nfts: The same_nfts of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: list[ResponseWrapperGetNftInfoResultSameNfts]
        """

        self._same_nfts = same_nfts

    @property
    def nft_items(self):
        """Gets the nft_items of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the numbers of the NFT.  # noqa: E501

        :return: The nft_items of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._nft_items

    @nft_items.setter
    def nft_items(self, nft_items):
        """Sets the nft_items of this ResponseWrapperGetNftInfoResult.

        It describes the numbers of the NFT.  # noqa: E501

        :param nft_items: The nft_items of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._nft_items = nft_items

    @property
    def oversupply_minting(self):
        """Gets the oversupply_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract — the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)  # noqa: E501

        :return: The oversupply_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._oversupply_minting

    @oversupply_minting.setter
    def oversupply_minting(self, oversupply_minting):
        """Sets the oversupply_minting of this ResponseWrapperGetNftInfoResult.

        It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.  \"1\" means true;  \"0\" means false;  \"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract — the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)  # noqa: E501

        :param oversupply_minting: The oversupply_minting of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._oversupply_minting = oversupply_minting

    @property
    def nft_name(self):
        """Gets the nft_name of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        nft_name  # noqa: E501

        :return: The nft_name of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._nft_name

    @nft_name.setter
    def nft_name(self, nft_name):
        """Sets the nft_name of this ResponseWrapperGetNftInfoResult.

        nft_name  # noqa: E501

        :param nft_name: The nft_name of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._nft_name = nft_name

    @property
    def website_url(self):
        """Gets the website_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the website url of the NFT. Return “null” means there is no website url or didn't find the website url.  # noqa: E501

        :return: The website_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this ResponseWrapperGetNftInfoResult.

        It describes the website url of the NFT. Return “null” means there is no website url or didn't find the website url.  # noqa: E501

        :param website_url: The website_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def github_url(self):
        """Gets the github_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the github url of the NFT. Return “null” means there is no github url or didn't find the github url.  # noqa: E501

        :return: The github_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._github_url

    @github_url.setter
    def github_url(self, github_url):
        """Sets the github_url of this ResponseWrapperGetNftInfoResult.

        It describes the github url of the NFT. Return “null” means there is no github url or didn't find the github url.  # noqa: E501

        :param github_url: The github_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._github_url = github_url

    @property
    def telegram_url(self):
        """Gets the telegram_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the telegram url of the NFT. Return “null” means there is no telegram url or didn't find the telegram url.  # noqa: E501

        :return: The telegram_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: str
        """
        return self._telegram_url

    @telegram_url.setter
    def telegram_url(self, telegram_url):
        """Sets the telegram_url of this ResponseWrapperGetNftInfoResult.

        It describes the telegram url of the NFT. Return “null” means there is no telegram url or didn't find the telegram url.  # noqa: E501

        :param telegram_url: The telegram_url of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: str
        """

        self._telegram_url = telegram_url

    @property
    def sales_24h(self):
        """Gets the sales_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the sales of the NFT in 24h.  # noqa: E501

        :return: The sales_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: float
        """
        return self._sales_24h

    @sales_24h.setter
    def sales_24h(self, sales_24h):
        """Sets the sales_24h of this ResponseWrapperGetNftInfoResult.

        It describes the sales of the NFT in 24h.  # noqa: E501

        :param sales_24h: The sales_24h of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: float
        """

        self._sales_24h = sales_24h

    @property
    def create_block_number(self):
        """Gets the create_block_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501

        It describes the number of blocks created for the NFT. Return “null” means that we didn't find the number of blocks created for the NFT.  # noqa: E501

        :return: The create_block_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :rtype: int
        """
        return self._create_block_number

    @create_block_number.setter
    def create_block_number(self, create_block_number):
        """Sets the create_block_number of this ResponseWrapperGetNftInfoResult.

        It describes the number of blocks created for the NFT. Return “null” means that we didn't find the number of blocks created for the NFT.  # noqa: E501

        :param create_block_number: The create_block_number of this ResponseWrapperGetNftInfoResult.  # noqa: E501
        :type: int
        """

        self._create_block_number = create_block_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperGetNftInfoResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperGetNftInfoResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
