# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AbiAddressInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_name': 'str',
        'is_contract': 'int',
        'malicious_address': 'int',
        'name': 'str',
        'standard': 'str',
        'symbol': 'str'
    }

    attribute_map = {
        'contract_name': 'contract_name',
        'is_contract': 'is_contract',
        'malicious_address': 'malicious_address',
        'name': 'name',
        'standard': 'standard',
        'symbol': 'symbol'
    }

    def __init__(self, contract_name=None, is_contract=None, malicious_address=None, name=None, standard=None, symbol=None):  # noqa: E501
        """AbiAddressInfo - a model defined in Swagger"""  # noqa: E501
        self._contract_name = None
        self._is_contract = None
        self._malicious_address = None
        self._name = None
        self._standard = None
        self._symbol = None
        self.discriminator = None
        if contract_name is not None:
            self.contract_name = contract_name
        if is_contract is not None:
            self.is_contract = is_contract
        if malicious_address is not None:
            self.malicious_address = malicious_address
        if name is not None:
            self.name = name
        if standard is not None:
            self.standard = standard
        if symbol is not None:
            self.symbol = symbol

    @property
    def contract_name(self):
        """Gets the contract_name of this AbiAddressInfo.  # noqa: E501

        It describes the contract name if the address is a contract.  # noqa: E501

        :return: The contract_name of this AbiAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._contract_name

    @contract_name.setter
    def contract_name(self, contract_name):
        """Sets the contract_name of this AbiAddressInfo.

        It describes the contract name if the address is a contract.  # noqa: E501

        :param contract_name: The contract_name of this AbiAddressInfo.  # noqa: E501
        :type: str
        """

        self._contract_name = contract_name

    @property
    def is_contract(self):
        """Gets the is_contract of this AbiAddressInfo.  # noqa: E501

        It describes whether the address is a contract. \"1\" means true; \"0\" means false.  # noqa: E501

        :return: The is_contract of this AbiAddressInfo.  # noqa: E501
        :rtype: int
        """
        return self._is_contract

    @is_contract.setter
    def is_contract(self, is_contract):
        """Sets the is_contract of this AbiAddressInfo.

        It describes whether the address is a contract. \"1\" means true; \"0\" means false.  # noqa: E501

        :param is_contract: The is_contract of this AbiAddressInfo.  # noqa: E501
        :type: int
        """

        self._is_contract = is_contract

    @property
    def malicious_address(self):
        """Gets the malicious_address of this AbiAddressInfo.  # noqa: E501

        It describes whether the address is a suspected malicious contract.\"1\" means true; \"0\" means that we have not found malicious behavior of this address.  # noqa: E501

        :return: The malicious_address of this AbiAddressInfo.  # noqa: E501
        :rtype: int
        """
        return self._malicious_address

    @malicious_address.setter
    def malicious_address(self, malicious_address):
        """Sets the malicious_address of this AbiAddressInfo.

        It describes whether the address is a suspected malicious contract.\"1\" means true; \"0\" means that we have not found malicious behavior of this address.  # noqa: E501

        :param malicious_address: The malicious_address of this AbiAddressInfo.  # noqa: E501
        :type: int
        """

        self._malicious_address = malicious_address

    @property
    def name(self):
        """Gets the name of this AbiAddressInfo.  # noqa: E501

        It describes the token name if the address is an ERC20 contract.  # noqa: E501

        :return: The name of this AbiAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbiAddressInfo.

        It describes the token name if the address is an ERC20 contract.  # noqa: E501

        :param name: The name of this AbiAddressInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def standard(self):
        """Gets the standard of this AbiAddressInfo.  # noqa: E501

        It describes the standard type of the contract.Example:\"erc20\".  # noqa: E501

        :return: The standard of this AbiAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this AbiAddressInfo.

        It describes the standard type of the contract.Example:\"erc20\".  # noqa: E501

        :param standard: The standard of this AbiAddressInfo.  # noqa: E501
        :type: str
        """

        self._standard = standard

    @property
    def symbol(self):
        """Gets the symbol of this AbiAddressInfo.  # noqa: E501

        It describes the token symbol if the address is an ERC20 contract.  # noqa: E501

        :return: The symbol of this AbiAddressInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this AbiAddressInfo.

        It describes the token symbol if the address is an ERC20 contract.  # noqa: E501

        :param symbol: The symbol of this AbiAddressInfo.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbiAddressInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbiAddressInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
