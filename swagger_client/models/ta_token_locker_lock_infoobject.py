# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaTokenLockerLockInfoobject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'end_time': 'int',
        'is_lp_token': 'int',
        'lock_id': 'str',
        'owner': 'str',
        'start_time': 'int',
        'token': 'str',
        'unlocked_amount': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'end_time': 'endTime',
        'is_lp_token': 'isLpToken',
        'lock_id': 'lockId',
        'owner': 'owner',
        'start_time': 'startTime',
        'token': 'token',
        'unlocked_amount': 'unlockedAmount'
    }

    def __init__(self, amount=None, end_time=None, is_lp_token=None, lock_id=None, owner=None, start_time=None, token=None, unlocked_amount=None):  # noqa: E501
        """TaTokenLockerLockInfoobject - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._end_time = None
        self._is_lp_token = None
        self._lock_id = None
        self._owner = None
        self._start_time = None
        self._token = None
        self._unlocked_amount = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if end_time is not None:
            self.end_time = end_time
        if is_lp_token is not None:
            self.is_lp_token = is_lp_token
        if lock_id is not None:
            self.lock_id = lock_id
        if owner is not None:
            self.owner = owner
        if start_time is not None:
            self.start_time = start_time
        if token is not None:
            self.token = token
        if unlocked_amount is not None:
            self.unlocked_amount = unlocked_amount

    @property
    def amount(self):
        """Gets the amount of this TaTokenLockerLockInfoobject.  # noqa: E501

        累计总锁仓数量  # noqa: E501

        :return: The amount of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaTokenLockerLockInfoobject.

        累计总锁仓数量  # noqa: E501

        :param amount: The amount of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def end_time(self):
        """Gets the end_time of this TaTokenLockerLockInfoobject.  # noqa: E501

        解锁时间戳  # noqa: E501

        :return: The end_time of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaTokenLockerLockInfoobject.

        解锁时间戳  # noqa: E501

        :param end_time: The end_time of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def is_lp_token(self):
        """Gets the is_lp_token of this TaTokenLockerLockInfoobject.  # noqa: E501

        是否为lp token -1:未知、0:否、1:是  # noqa: E501

        :return: The is_lp_token of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: int
        """
        return self._is_lp_token

    @is_lp_token.setter
    def is_lp_token(self, is_lp_token):
        """Sets the is_lp_token of this TaTokenLockerLockInfoobject.

        是否为lp token -1:未知、0:否、1:是  # noqa: E501

        :param is_lp_token: The is_lp_token of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: int
        """

        self._is_lp_token = is_lp_token

    @property
    def lock_id(self):
        """Gets the lock_id of this TaTokenLockerLockInfoobject.  # noqa: E501

        lock id  # noqa: E501

        :return: The lock_id of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._lock_id

    @lock_id.setter
    def lock_id(self, lock_id):
        """Sets the lock_id of this TaTokenLockerLockInfoobject.

        lock id  # noqa: E501

        :param lock_id: The lock_id of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._lock_id = lock_id

    @property
    def owner(self):
        """Gets the owner of this TaTokenLockerLockInfoobject.  # noqa: E501

        用户地址 address  # noqa: E501

        :return: The owner of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TaTokenLockerLockInfoobject.

        用户地址 address  # noqa: E501

        :param owner: The owner of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def start_time(self):
        """Gets the start_time of this TaTokenLockerLockInfoobject.  # noqa: E501

        开始时间戳  # noqa: E501

        :return: The start_time of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaTokenLockerLockInfoobject.

        开始时间戳  # noqa: E501

        :param start_time: The start_time of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def token(self):
        """Gets the token of this TaTokenLockerLockInfoobject.  # noqa: E501

        token contract address  # noqa: E501

        :return: The token of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TaTokenLockerLockInfoobject.

        token contract address  # noqa: E501

        :param token: The token of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def unlocked_amount(self):
        """Gets the unlocked_amount of this TaTokenLockerLockInfoobject.  # noqa: E501

        已解锁数量  # noqa: E501

        :return: The unlocked_amount of this TaTokenLockerLockInfoobject.  # noqa: E501
        :rtype: str
        """
        return self._unlocked_amount

    @unlocked_amount.setter
    def unlocked_amount(self, unlocked_amount):
        """Sets the unlocked_amount of this TaTokenLockerLockInfoobject.

        已解锁数量  # noqa: E501

        :param unlocked_amount: The unlocked_amount of this TaTokenLockerLockInfoobject.  # noqa: E501
        :type: str
        """

        self._unlocked_amount = unlocked_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaTokenLockerLockInfoobject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaTokenLockerLockInfoobject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
