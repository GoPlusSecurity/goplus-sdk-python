# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperSolanaTokenSecurityDex(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'week': 'ResponseWrapperSolanaTokenSecurityWeek',
        'month': 'ResponseWrapperSolanaTokenSecurityMonth',
        'price': 'str',
        'open_time': 'str',
        'id': 'str',
        'tvl': 'str',
        'type': 'str',
        'dex_name': 'str',
        'day': 'ResponseWrapperSolanaTokenSecurityDay',
        'lp_amount': 'str',
        'fee_rate': 'str'
    }

    attribute_map = {
        'week': 'week',
        'month': 'month',
        'price': 'price',
        'open_time': 'open_time',
        'id': 'id',
        'tvl': 'tvl',
        'type': 'type',
        'dex_name': 'dex_name',
        'day': 'day',
        'lp_amount': 'lp_amount',
        'fee_rate': 'fee_rate'
    }

    def __init__(self, week=None, month=None, price=None, open_time=None, id=None, tvl=None, type=None, dex_name=None, day=None, lp_amount=None, fee_rate=None):  # noqa: E501
        """ResponseWrapperSolanaTokenSecurityDex - a model defined in Swagger"""  # noqa: E501
        self._week = None
        self._month = None
        self._price = None
        self._open_time = None
        self._id = None
        self._tvl = None
        self._type = None
        self._dex_name = None
        self._day = None
        self._lp_amount = None
        self._fee_rate = None
        self.discriminator = None
        if week is not None:
            self.week = week
        if month is not None:
            self.month = month
        if price is not None:
            self.price = price
        if open_time is not None:
            self.open_time = open_time
        if id is not None:
            self.id = id
        if tvl is not None:
            self.tvl = tvl
        if type is not None:
            self.type = type
        if dex_name is not None:
            self.dex_name = dex_name
        if day is not None:
            self.day = day
        if lp_amount is not None:
            self.lp_amount = lp_amount
        if fee_rate is not None:
            self.fee_rate = fee_rate

    @property
    def week(self):
        """Gets the week of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501


        :return: The week of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: ResponseWrapperSolanaTokenSecurityWeek
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this ResponseWrapperSolanaTokenSecurityDex.


        :param week: The week of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: ResponseWrapperSolanaTokenSecurityWeek
        """

        self._week = week

    @property
    def month(self):
        """Gets the month of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501


        :return: The month of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: ResponseWrapperSolanaTokenSecurityMonth
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this ResponseWrapperSolanaTokenSecurityDex.


        :param month: The month of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: ResponseWrapperSolanaTokenSecurityMonth
        """

        self._month = month

    @property
    def price(self):
        """Gets the price of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Current price (Unitless, count by two tokens in the pool).  # noqa: E501

        :return: The price of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ResponseWrapperSolanaTokenSecurityDex.

        Current price (Unitless, count by two tokens in the pool).  # noqa: E501

        :param price: The price of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def open_time(self):
        """Gets the open_time of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        The epoch when trading is opened.  # noqa: E501

        :return: The open_time of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this ResponseWrapperSolanaTokenSecurityDex.

        The epoch when trading is opened.  # noqa: E501

        :param open_time: The open_time of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._open_time = open_time

    @property
    def id(self):
        """Gets the id of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Address of the liquidity pool.  # noqa: E501

        :return: The id of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseWrapperSolanaTokenSecurityDex.

        Address of the liquidity pool.  # noqa: E501

        :param id: The id of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tvl(self):
        """Gets the tvl of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Total value locked (TVL) in the liquidity pool.  # noqa: E501

        :return: The tvl of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._tvl

    @tvl.setter
    def tvl(self, tvl):
        """Sets the tvl of this ResponseWrapperSolanaTokenSecurityDex.

        Total value locked (TVL) in the liquidity pool.  # noqa: E501

        :param tvl: The tvl of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._tvl = tvl

    @property
    def type(self):
        """Gets the type of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Type of the DEX, could be \"standard\" or \"concentrated\".  # noqa: E501

        :return: The type of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseWrapperSolanaTokenSecurityDex.

        Type of the DEX, could be \"standard\" or \"concentrated\".  # noqa: E501

        :param type: The type of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def dex_name(self):
        """Gets the dex_name of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Name of the DEX.  # noqa: E501

        :return: The dex_name of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._dex_name

    @dex_name.setter
    def dex_name(self, dex_name):
        """Sets the dex_name of this ResponseWrapperSolanaTokenSecurityDex.

        Name of the DEX.  # noqa: E501

        :param dex_name: The dex_name of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._dex_name = dex_name

    @property
    def day(self):
        """Gets the day of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501


        :return: The day of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: ResponseWrapperSolanaTokenSecurityDay
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this ResponseWrapperSolanaTokenSecurityDex.


        :param day: The day of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: ResponseWrapperSolanaTokenSecurityDay
        """

        self._day = day

    @property
    def lp_amount(self):
        """Gets the lp_amount of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Total amount of liquidity provider tokens, only shown when type is \"standard\"  # noqa: E501

        :return: The lp_amount of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._lp_amount

    @lp_amount.setter
    def lp_amount(self, lp_amount):
        """Sets the lp_amount of this ResponseWrapperSolanaTokenSecurityDex.

        Total amount of liquidity provider tokens, only shown when type is \"standard\"  # noqa: E501

        :param lp_amount: The lp_amount of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._lp_amount = lp_amount

    @property
    def fee_rate(self):
        """Gets the fee_rate of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501

        Transaction fee rate.  # noqa: E501

        :return: The fee_rate of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this ResponseWrapperSolanaTokenSecurityDex.

        Transaction fee rate.  # noqa: E501

        :param fee_rate: The fee_rate of this ResponseWrapperSolanaTokenSecurityDex.  # noqa: E501
        :type: str
        """

        self._fee_rate = fee_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperSolanaTokenSecurityDex, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperSolanaTokenSecurityDex):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
