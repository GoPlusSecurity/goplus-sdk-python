# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperTokenSecurityFakeToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'true_token_address': 'str',
        'value': 'int'
    }

    attribute_map = {
        'true_token_address': 'true_token_address',
        'value': 'value'
    }

    def __init__(self, true_token_address=None, value=None):  # noqa: E501
        """ResponseWrapperTokenSecurityFakeToken - a model defined in Swagger"""  # noqa: E501
        self._true_token_address = None
        self._value = None
        self.discriminator = None
        if true_token_address is not None:
            self.true_token_address = true_token_address
        if value is not None:
            self.value = value

    @property
    def true_token_address(self):
        """Gets the true_token_address of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501

        If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.  # noqa: E501

        :return: The true_token_address of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501
        :rtype: str
        """
        return self._true_token_address

    @true_token_address.setter
    def true_token_address(self, true_token_address):
        """Sets the true_token_address of this ResponseWrapperTokenSecurityFakeToken.

        If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.  # noqa: E501

        :param true_token_address: The true_token_address of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501
        :type: str
        """

        self._true_token_address = true_token_address

    @property
    def value(self):
        """Gets the value of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501

        If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.  # noqa: E501

        :return: The value of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ResponseWrapperTokenSecurityFakeToken.

        If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.  # noqa: E501

        :param value: The value of this ResponseWrapperTokenSecurityFakeToken.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperTokenSecurityFakeToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperTokenSecurityFakeToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
