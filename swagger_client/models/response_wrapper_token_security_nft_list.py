# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperTokenSecurityNFTList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nft_percentage': 'str',
        'nft_id': 'str',
        'amount': 'str',
        'in_effect': 'str',
        'value': 'str'
    }

    attribute_map = {
        'nft_percentage': 'NFT_percentage',
        'nft_id': 'NFT_id',
        'amount': 'amount',
        'in_effect': 'in_effect',
        'value': 'value'
    }

    def __init__(self, nft_percentage=None, nft_id=None, amount=None, in_effect=None, value=None):  # noqa: E501
        """ResponseWrapperTokenSecurityNFTList - a model defined in Swagger"""  # noqa: E501
        self._nft_percentage = None
        self._nft_id = None
        self._amount = None
        self._in_effect = None
        self._value = None
        self.discriminator = None
        if nft_percentage is not None:
            self.nft_percentage = nft_percentage
        if nft_id is not None:
            self.nft_id = nft_id
        if amount is not None:
            self.amount = amount
        if in_effect is not None:
            self.in_effect = in_effect
        if value is not None:
            self.value = value

    @property
    def nft_percentage(self):
        """Gets the nft_percentage of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501

        \"NFT_percentage\" represents the proportion of that NFT in the total liquidity. When the LP holder is a lockup address, this information will also appear in the \"locked_detail\" section.  # noqa: E501

        :return: The nft_percentage of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :rtype: str
        """
        return self._nft_percentage

    @nft_percentage.setter
    def nft_percentage(self, nft_percentage):
        """Sets the nft_percentage of this ResponseWrapperTokenSecurityNFTList.

        \"NFT_percentage\" represents the proportion of that NFT in the total liquidity. When the LP holder is a lockup address, this information will also appear in the \"locked_detail\" section.  # noqa: E501

        :param nft_percentage: The nft_percentage of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :type: str
        """

        self._nft_percentage = nft_percentage

    @property
    def nft_id(self):
        """Gets the nft_id of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501

        \"NFT_id\" is the NFTID corresponding to that NFT.   # noqa: E501

        :return: The nft_id of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :rtype: str
        """
        return self._nft_id

    @nft_id.setter
    def nft_id(self, nft_id):
        """Sets the nft_id of this ResponseWrapperTokenSecurityNFTList.

        \"NFT_id\" is the NFTID corresponding to that NFT.   # noqa: E501

        :param nft_id: The nft_id of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :type: str
        """

        self._nft_id = nft_id

    @property
    def amount(self):
        """Gets the amount of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501

        \"amount\" is the liquidity quantity corresponding to the NFT.  # noqa: E501

        :return: The amount of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ResponseWrapperTokenSecurityNFTList.

        \"amount\" is the liquidity quantity corresponding to the NFT.  # noqa: E501

        :param amount: The amount of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def in_effect(self):
        """Gets the in_effect of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501

        \"in_effect\" indicates whether the liquidity corresponding to that NFT is effective at the current price.   # noqa: E501

        :return: The in_effect of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :rtype: str
        """
        return self._in_effect

    @in_effect.setter
    def in_effect(self, in_effect):
        """Sets the in_effect of this ResponseWrapperTokenSecurityNFTList.

        \"in_effect\" indicates whether the liquidity corresponding to that NFT is effective at the current price.   # noqa: E501

        :param in_effect: The in_effect of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :type: str
        """

        self._in_effect = in_effect

    @property
    def value(self):
        """Gets the value of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501

        \"value\" is the total USD value corresponding to the NFT.  # noqa: E501

        :return: The value of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ResponseWrapperTokenSecurityNFTList.

        \"value\" is the total USD value corresponding to the NFT.  # noqa: E501

        :param value: The value of this ResponseWrapperTokenSecurityNFTList.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperTokenSecurityNFTList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperTokenSecurityNFTList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
