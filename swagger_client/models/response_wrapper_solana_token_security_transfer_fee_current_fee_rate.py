# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_fee': 'str',
        'fee_rate': 'str'
    }

    attribute_map = {
        'maximum_fee': 'maximum_fee',
        'fee_rate': 'fee_rate'
    }

    def __init__(self, maximum_fee=None, fee_rate=None):  # noqa: E501
        """ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate - a model defined in Swagger"""  # noqa: E501
        self._maximum_fee = None
        self._fee_rate = None
        self.discriminator = None
        if maximum_fee is not None:
            self.maximum_fee = maximum_fee
        if fee_rate is not None:
            self.fee_rate = fee_rate

    @property
    def maximum_fee(self):
        """Gets the maximum_fee of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501

        Maximum fee amount for a single transaction.  # noqa: E501

        :return: The maximum_fee of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501
        :rtype: str
        """
        return self._maximum_fee

    @maximum_fee.setter
    def maximum_fee(self, maximum_fee):
        """Sets the maximum_fee of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.

        Maximum fee amount for a single transaction.  # noqa: E501

        :param maximum_fee: The maximum_fee of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501
        :type: str
        """

        self._maximum_fee = maximum_fee

    @property
    def fee_rate(self):
        """Gets the fee_rate of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501

        Fee rate (expressed as a ratio, e.g., 0.02 means 2%)  # noqa: E501

        :return: The fee_rate of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501
        :rtype: str
        """
        return self._fee_rate

    @fee_rate.setter
    def fee_rate(self, fee_rate):
        """Sets the fee_rate of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.

        Fee rate (expressed as a ratio, e.g., 0.02 means 2%)  # noqa: E501

        :param fee_rate: The fee_rate of this ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate.  # noqa: E501
        :type: str
        """

        self._fee_rate = fee_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperSolanaTokenSecurityTransferFeeCurrentFeeRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
