# coding: utf-8

"""
    GoPlus Security API Document

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResponseWrapperPhishingSiteResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'website_contract_security': 'list[str]',
        'phishing_site': 'int'
    }

    attribute_map = {
        'website_contract_security': 'website_contract_security',
        'phishing_site': 'phishing_site'
    }

    def __init__(self, website_contract_security=None, phishing_site=None):  # noqa: E501
        """ResponseWrapperPhishingSiteResult - a model defined in Swagger"""  # noqa: E501
        self._website_contract_security = None
        self._phishing_site = None
        self.discriminator = None
        if website_contract_security is not None:
            self.website_contract_security = website_contract_security
        if phishing_site is not None:
            self.phishing_site = phishing_site

    @property
    def website_contract_security(self):
        """Gets the website_contract_security of this ResponseWrapperPhishingSiteResult.  # noqa: E501


        :return: The website_contract_security of this ResponseWrapperPhishingSiteResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._website_contract_security

    @website_contract_security.setter
    def website_contract_security(self, website_contract_security):
        """Sets the website_contract_security of this ResponseWrapperPhishingSiteResult.


        :param website_contract_security: The website_contract_security of this ResponseWrapperPhishingSiteResult.  # noqa: E501
        :type: list[str]
        """

        self._website_contract_security = website_contract_security

    @property
    def phishing_site(self):
        """Gets the phishing_site of this ResponseWrapperPhishingSiteResult.  # noqa: E501

        It means whether the website is a phishing site. \"1\" means true; \"0\" means that we have not found malicious behavior of this website.  # noqa: E501

        :return: The phishing_site of this ResponseWrapperPhishingSiteResult.  # noqa: E501
        :rtype: int
        """
        return self._phishing_site

    @phishing_site.setter
    def phishing_site(self, phishing_site):
        """Sets the phishing_site of this ResponseWrapperPhishingSiteResult.

        It means whether the website is a phishing site. \"1\" means true; \"0\" means that we have not found malicious behavior of this website.  # noqa: E501

        :param phishing_site: The phishing_site of this ResponseWrapperPhishingSiteResult.  # noqa: E501
        :type: int
        """

        self._phishing_site = phishing_site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseWrapperPhishingSiteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseWrapperPhishingSiteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
