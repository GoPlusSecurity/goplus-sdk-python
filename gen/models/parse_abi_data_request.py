# coding: utf-8

"""
    GoPlus Security API Documentation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ParseAbiDataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain_id': 'str',
        'contract_address': 'str',
        'data': 'str',
        'signer': 'str'
    }

    attribute_map = {
        'chain_id': 'chain_id',
        'contract_address': 'contract_address',
        'data': 'data',
        'signer': 'signer'
    }

    def __init__(self, chain_id=None, contract_address=None, data=None, signer=None):  # noqa: E501
        """ParseAbiDataRequest - a model defined in Swagger"""  # noqa: E501
        self._chain_id = None
        self._contract_address = None
        self._data = None
        self._signer = None
        self.discriminator = None
        self.chain_id = chain_id
        if contract_address is not None:
            self.contract_address = contract_address
        self.data = data
        if signer is not None:
            self.signer = signer

    @property
    def chain_id(self):
        """Gets the chain_id of this ParseAbiDataRequest.  # noqa: E501

        chain_id  # noqa: E501

        :return: The chain_id of this ParseAbiDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this ParseAbiDataRequest.

        chain_id  # noqa: E501

        :param chain_id: The chain_id of this ParseAbiDataRequest.  # noqa: E501
        :type: str
        """
        if chain_id is None:
            raise ValueError("Invalid value for `chain_id`, must not be `None`")  # noqa: E501

        self._chain_id = chain_id

    @property
    def contract_address(self):
        """Gets the contract_address of this ParseAbiDataRequest.  # noqa: E501

        contract_address  # noqa: E501

        :return: The contract_address of this ParseAbiDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this ParseAbiDataRequest.

        contract_address  # noqa: E501

        :param contract_address: The contract_address of this ParseAbiDataRequest.  # noqa: E501
        :type: str
        """

        self._contract_address = contract_address

    @property
    def data(self):
        """Gets the data of this ParseAbiDataRequest.  # noqa: E501

        data  # noqa: E501

        :return: The data of this ParseAbiDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ParseAbiDataRequest.

        data  # noqa: E501

        :param data: The data of this ParseAbiDataRequest.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def signer(self):
        """Gets the signer of this ParseAbiDataRequest.  # noqa: E501

        signer  # noqa: E501

        :return: The signer of this ParseAbiDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._signer

    @signer.setter
    def signer(self, signer):
        """Sets the signer of this ParseAbiDataRequest.

        signer  # noqa: E501

        :param signer: The signer of this ParseAbiDataRequest.  # noqa: E501
        :type: str
        """

        self._signer = signer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParseAbiDataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParseAbiDataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
